{
    "promises": {
      "initialCode": "// Promises Task\nfunction myPromise() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Promise resolved!');\n    }, 1000);\n  });\n}",
      "solutionCode": "// Promises Solution\nfunction myPromise() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Promise resolved!');\n    }, 1000);\n  });\n}\n\nmyPromise().then(result => console.log(result));"
    },
    "callback-hell": {
      "initialCode": "// Callback Hell Task\nfunction doSomething(callback) {\n  setTimeout(() => {\n    console.log('Doing something...');\n    callback();\n  }, 1000);\n}\n\ndoSomething(() => {\n  console.log('Callback executed');\n});",
      "solutionCode": "// Callback Hell Solution\nfunction doSomething(callback) {\n  setTimeout(() => {\n    console.log('Doing something...');\n    callback(() => {\n      console.log('Nested callback executed');\n    });\n  }, 1000);\n}\n\ndoSomething((nestedCallback) => {\n  console.log('Callback executed');\n  nestedCallback();\n});"
    },
    "event-loop": {
      "initialCode": "// Event Loop Task\nconsole.log('This is the event loop');",
      "solutionCode": "// Event Loop Solution\nconsole.log('Start');\nsetTimeout(() => {\n  console.log('Timeout');\n}, 0);\nPromise.resolve().then(() => console.log('Promise'));\nconsole.log('End');"
    },
    "es6-features": {
      "initialCode": "// ES6 Features Task\nconst arrowFunction = () => {\n  console.log('Arrow function');\n};",
      "solutionCode": "// ES6 Features Solution\nconst arrowFunction = () => {\n  console.log('Arrow function executed');\n};\n\narrowFunction();"
    }
  }
  